[
    {
        "id": "ac8c146e2c7dd888",
        "type": "tab",
        "label": "main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b35df062de91c24c",
        "type": "tab",
        "label": "ADS-Anbindung",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "2d46b82c2bafaf69",
        "type": "tab",
        "label": "[TEST] ADS-Anbindung",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3953286b03d613bb",
        "type": "ads-client-connection",
        "name": "SLS",
        "targetAmsNetId": "172.22.168.11.1.1",
        "targetAdsPort": "851",
        "objectifyEnumerations": true,
        "convertDatesToJavascript": true,
        "readAndCacheSymbols": false,
        "readAndCacheDataTypes": false,
        "disableSymbolVersionMonitoring": false,
        "routerTcpPort": "48898",
        "routerAddress": "172.22.168.11",
        "localAddress": "",
        "localTcpPort": "",
        "localAmsNetId": "172.22.168.61.1.1",
        "localAdsPort": "32750",
        "timeoutDelay": "",
        "hideConsoleWarnings": false,
        "autoReconnect": true,
        "reconnectInterval": "",
        "checkStateInterval": "",
        "connectionDownDelay": "",
        "allowHalfOpen": false,
        "disableBigInt": false,
        "debuggingLevel": "",
        "bareClient": false
    },
    {
        "id": "19d3d373c748b635",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "eae5f4b74866039d",
        "type": "ads-client-connection",
        "name": "SLS_localhost",
        "targetAmsNetId": "localhost",
        "targetAdsPort": "851",
        "objectifyEnumerations": true,
        "convertDatesToJavascript": true,
        "readAndCacheSymbols": false,
        "readAndCacheDataTypes": false,
        "disableSymbolVersionMonitoring": false,
        "routerTcpPort": "",
        "routerAddress": "",
        "localAddress": "",
        "localTcpPort": "",
        "localAmsNetId": "",
        "localAdsPort": "",
        "timeoutDelay": "",
        "hideConsoleWarnings": false,
        "autoReconnect": true,
        "reconnectInterval": "",
        "checkStateInterval": "",
        "connectionDownDelay": "",
        "allowHalfOpen": false,
        "disableBigInt": false,
        "debuggingLevel": "",
        "bareClient": false
    },
    {
        "id": "74a9e8a59e7f0282",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 300,
        "wires": []
    },
    {
        "id": "5249a4fc16b9c5e2",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "63ef971823f00fc1"
            ]
        ]
    },
    {
        "id": "63ef971823f00fc1",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Power Calculation",
        "func": "// Infrarotheizung\nvar powerInfrared1 = parseFloat(global.get(\"iPowerInfrared1\"))/10; // W\nvar powerInfrared2 = parseFloat(global.get(\"iPowerInfrared2\"))/10; // W\nvar powerInfrared3 = parseFloat(global.get(\"iPowerInfrared3\"))/10; // W\nvar powerInfrared = powerInfrared1 + powerInfrared2 + powerInfrared3\n// Heizmatte 1 (Bauplattform)\nif (global.get(\"bRelaisHeatingMat1\")===true) {\n    var powerHeatingMat1 = 100;\n} else {\n    var powerHeatingMat1 = 0;\n}\n// Heizmatte 2 (Pulverplattform)\nif (global.get(\"bRelaisHeatingMat2\")===true) {\n    var powerHeatingMat2 = 100;\n} else {\n    var powerHeatingMat2 = 0;\n}\n// Heizmatte 3 (Faserintegration)\nif (global.get(\"bRelaisHeatingFiber\")===true) {\n    var powerHeatingMatFiber = 50;\n} else {\n    var powerHeatingMatFiber = 0;\n}\n// Düsenheizung\nif (global.get(\"bRelaisHeatNozzle\")===true) {\n    var powerHeatingNozzle = 50;\n} else {\n    var powerHeatingNozzle = 0;\n}\n// Laser\nif (global.get(\"iStateTemperatrueControlling\")===2) {\n    var powerLaser = 5;\n} else {\n    var powerLaser = 0;\n}\n// Ventilator -> Grundlast\n\n// Motor 1 (Bauplattform)\nvar powerMotor1=global.get(\"iBuildPlatformCurrent\")*230/1000\n\n// Motor 2 (Vorratsplattform)\nvar powerMotor2=global.get(\"iReservoirPlatformCurrent\")*230/1000\n// Motor 3 (Düse X-Achse)\nvar powerMotor3=global.get(\"iNozzleXAxisCurrent\")*230/1000\n// Motor 4 (Düse Y-Achse)\nvar powerMotor4=global.get(\"iNozzleYAxisCurrent\")*230/1000\n// Motor 5 (Rakel)\nvar powerMotor5 = global.get(\"iDoctorBladeCurrent\")*230/1000\n// Motor 6 (Faservorschub)\nvar powerMotor6=global.get(\"iFiberTransportIntegrationUnitCurrent\")*230/1000\n\n// Gesamtleistung\nvar powerTotal=powerInfrared+powerHeatingMat1+powerHeatingMat2+powerHeatingMatFiber+powerHeatingNozzle+powerLaser+powerMotor1+powerMotor2+powerMotor3+powerMotor4+powerMotor5+powerMotor6;\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Power\",\n        fields: {\n            powerInfrared:powerInfrared,\n            powerHeatingMat1:powerHeatingMat1,\n            powerHeatingMat2:powerHeatingMat2,\n            powerHeatingMatFiber:powerHeatingMatFiber,\n            powerHeatingNozzle:powerHeatingNozzle,\n            powerLaser:powerLaser,\n            powerMotorBuild:powerMotor1,\n            powerMotorReservoir:powerMotor2,\n            powerMotorNozzleX:powerMotor3,\n            powerMotorNozzleY:powerMotor4,\n            powerMotorDoctor:powerMotor5,\n            powerMotorFiber:powerMotor6,\n            powerTotal:powerTotal\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "72214a5c85d5f83e",
                "74a9e8a59e7f0282"
            ]
        ]
    },
    {
        "id": "9b87434952c3b1ec",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Material Calculation",
        "func": "var weightPowder = parseFloat(global.get(\"weightPowder\"))\nvar volumePowder = parseFloat(global.get(\"volumePowder\"))\nvar lengthFiber = parseFloat(global.get(\"lengthFiber\"))\nvar weightFiber = parseFloat(global.get(\"lengthFiber\")) * 100 * Math.pow(parseFloat(global.get(\"diameterFiber\"))/2, 2) * Math.PI * parseFloat(global.get(\"densityFiber\")) / 1000; // kg\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Material\",\n        fields: {\n            weightPowder:weightPowder,\n            volumePowder:volumePowder,\n            lengthFiber:lengthFiber,\n            weightFiber:weightFiber\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "71376036c6689ec4",
                "3da11da4b456b9cd"
            ]
        ]
    },
    {
        "id": "78a84bc4357dd04b",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Temperature Monitoring",
        "func": "// Temperatur Gehäuse\nvar tempBuilding = global.get(\"rPT100_Building\")\n// Temperatur Düse\nvar tempNozzle = global.get(\"rPT100_Nozzle\")\n// Temperatur Faserintegrationseinheit\nvar tempFaser = global.get(\"rPT100_Fiber\")\n// Temperature Pulveroberfläche\nvar tempSurface = global.get(\"rTemperatureSurface\")\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Temperature\",\n        fields: {\n            tempBuilding:tempBuilding,\n            tempNozzle:tempNozzle,\n            tempFaser:tempFaser,\n            tempSurface:tempSurface\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1040,
        "wires": [
            [
                "24c98aec40d62039",
                "f49a47868a01a908"
            ]
        ]
    },
    {
        "id": "72214a5c85d5f83e",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "bcd231c287db36fd",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 760,
        "wires": [
            [
                "9b87434952c3b1ec"
            ]
        ]
    },
    {
        "id": "71376036c6689ec4",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 720,
        "wires": []
    },
    {
        "id": "3da11da4b456b9cd",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 800,
        "wires": []
    },
    {
        "id": "754f71704f985fdd",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "78a84bc4357dd04b"
            ]
        ]
    },
    {
        "id": "f49a47868a01a908",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 1000,
        "wires": []
    },
    {
        "id": "24c98aec40d62039",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1080,
        "wires": []
    },
    {
        "id": "31b99a476597b442",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1180,
        "wires": [
            [
                "067a58cc9f83e710"
            ]
        ]
    },
    {
        "id": "067a58cc9f83e710",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Process Monitoring",
        "func": "// Genereller Maschinenstatus\nvar machineState = global.get(\"iGeneralMachineState\")\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\n// Aktuelle Schicht\nvar currentLayer = global.get(\"iCurrentLayer\")\n\n// Gesamtanzahl Schichten\nvar totalLayers = global.get(\"iTotalLayers\")\n\nmsg.payload = [\n    {\n        measurement: \"Process Monitoring\",\n        fields: {\n            machineState:machineState,\n            process:parseFloat(global.get(\"iStateTemperatrueControlling\")),\n            component:component,\n            currentLayer:currentLayer,\n            totalLayers:totalLayers\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1180,
        "wires": [
            [
                "d6f5b7744a8a1c89",
                "3d6fd74e8626a6e4"
            ]
        ]
    },
    {
        "id": "3d6fd74e8626a6e4",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d6f5b7744a8a1c89",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d68b232ff2f059c2",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Set Emission Values",
        "func": "global.set(\"emissionPowder\", 6.9); // kg/kg, PA12\nglobal.set(\"emissionFiber\", 19.849); // kg/kg, 1k roving\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d6cbdfbf0b4a1c8f",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 440,
        "wires": []
    },
    {
        "id": "0b42235ee49d2bfe",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 520,
        "wires": []
    },
    {
        "id": "3b1de3d64166c5b7",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Energy Calculation",
        "func": "// Infrarotheizung\nvar powerInfrared1 = parseFloat(global.get(\"iPowerInfrared1\"))/10;\nvar powerInfrared2 = parseFloat(global.get(\"iPowerInfrared2\"))/10;\nvar powerInfrared3 = parseFloat(global.get(\"iPowerInfrared3\"))/10;\nvar energyInfrared = parseFloat(global.get(\"energyInfrared\")) + (powerInfrared1+powerInfrared2+powerInfrared3)*(5/3600)/1000; //kWh\nglobal.set(\"energyInfrared\", energyInfrared)\n// Heizmatte 1 (Bauplattform)\nif (global.get(\"bRelaisHeatingMat1\")===true) {\n    var powerHeatingMat1 = 100;\n    var energyHeatingMat1 = parseFloat(global.get(\"energyHeatingMat1\"))+(powerHeatingMat1 * (5 / 3600)/1000); // kWh\n    global.set(\"energyHeatingMat1\", energyHeatingMat1);\n}\n// Heizmatte 2 (Pulverplattform)\nif (global.get(\"bRelaisHeatingMat2\")===true) {\n    var powerHeatingMat2 = 100;\n    var energyHeatingMat2 = parseFloat(global.get(\"energyHeatingMat2\"))+(powerHeatingMat2 * (5 / 3600)/1000); // kWh\n    global.set(\"energyHeatingMat2\", energyHeatingMat2);\n}\n// Heizmatte 3 (Faserintegration)\nif (global.get(\"bRelaisHeatingFiber\")===true) {\n    var powerHeatingMatFiber = 50;\n    var energyHeatingMatFiber = parseFloat(global.get(\"energyHeatingMatFiber\"))+(powerHeatingMatFiber * (5 / 3600)/1000); // kWh\n    global.set(\"energyHeatingMatFiber\", energyHeatingMatFiber);\n}\n// Düsenheizung\nif (global.get(\"bRelaisHeatNozzle\")===true) {\n    var powerHeatingNozzle = 50;\n    var energyHeatingNozzle = parseFloat(global.get(\"energyHeatingNozzle\"))+(powerHeatingNozzle * (5 / 3600)/1000); // kWh\n    global.set(\"energyHeatingNozzle\", energyHeatingNozzle);\n}\n// Laser\nif (global.get(\"iStateTemperatrueControlling\")===2) {\n    var powerLaser = 5;\n    var energyLaser = parseFloat(global.get(\"energyLaser\"))+(powerLaser * (5 / 3600)/1000); // kWh\n    global.set(\"energyLaser\",energyLaser);\n}\n// Ventilator -> Grundlast\n\n// Motor 1 (Bauplattform)\nvar powerMotor1=global.get(\"iBuildPlatformCurrent\")*230/1000;\nvar energyMotor1 = parseFloat(global.get(\"energyMotor1\"))+(powerMotor1 * (5/3600)/1000); // kWh\nglobal.set(\"energyMotor1\",energyMotor1);\n// Motor 2 (Vorratsplattform)\nvar powerMotor2=global.get(\"iReservoirPlatformCurrent\")*230/1000;\nvar energyMotor2 = parseFloat(global.get(\"energyMotor2\"))+(powerMotor2 * (5/3600)/1000); // kWh\nglobal.set(\"energyMotor2\",energyMotor2);\n// Motor 3 (Düse X-Achse)\nvar powerMotor3=global.get(\"iNozzleXAxisCurrent\")*230/1000;\nvar energyMotor3 = parseFloat(global.get(\"energyMotor3\"))+(powerMotor3 * (5/3600)/1000); // kWh\nglobal.set(\"energyMotor3\",energyMotor3);\n// Motor 4 (Düse Y-Achse)\nvar powerMotor4=global.get(\"iNozzleYAxisCurrent\")*230/1000;\nvar energyMotor4 = parseFloat(global.get(\"energyMotor4\"))+(powerMotor4 * (5/3600)/1000); // kWh\nglobal.set(\"energyMotor4\",energyMotor4);\n// Motor 5 (Rakel)\nvar powerMotor5 = global.get(\"iDoctorBladeCurrent\")*230/1000;\nvar energyMotor5 = parseFloat(global.get(\"energyMotor5\"))+(powerMotor5 * (5/3600)/1000); // kWh\nglobal.set(\"energyMotor5\",energyMotor5);\n// Motor 6 (Faservorschub)\nvar powerMotor6=global.get(\"iFiberTransportIntegrationUnitCurrent\")*230/1000;\nvar energyMotor6 = parseFloat(global.get(\"energyMotor6\"))+(powerMotor6 * (5/3600)/1000); // kWh\nglobal.set(\"energyMotor6\",energyMotor6);\n\n// Gesamtenergieverbrauch\nvar energyTotal=parseFloat(global.get(\"energyInfrared\"))+parseFloat(global.get(\"energyHeatingMat1\"))+parseFloat(global.get(\"energyHeatingMat2\"))+parseFloat(global.get(\"energyHeatingMatFiber\"))+parseFloat(global.get(\"energyHeatingNozzle\"))+parseFloat(global.get(\"energyLaser\"))+parseFloat(global.get(\"energyMotor1\"))+parseFloat(global.get(\"energyMotor2\"))+parseFloat(global.get(\"energyMotor3\"))+parseFloat(global.get(\"energyMotor4\"))+parseFloat(global.get(\"energyMotor5\"))+parseFloat(global.get(\"energyMotor6\"));\n\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Energy\",\n        fields: {\n            energyInfrared:energyInfrared,\n            energyHeatingMat1:energyHeatingMat1,\n            energyHeatingMat2:energyHeatingMat2,\n            energyHeatingMatFiber:energyHeatingMatFiber,\n            energyHeatingNozzle:energyHeatingNozzle,\n            energyLaser:energyLaser,\n            energyMotorBuild:energyMotor1,\n            energyMotorReservoir:energyMotor2,\n            energyMotorNozzleX:energyMotor3,\n            energyMotorNozzleY:energyMotor4,\n            energyMotorDoctor:energyMotor5,\n            energyMotorFiber:energyMotor6,\n            energyTotal:energyTotal\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 480,
        "wires": [
            [
                "d6cbdfbf0b4a1c8f",
                "0b42235ee49d2bfe"
            ]
        ]
    },
    {
        "id": "ed4ccd02f8c080b0",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "3b1de3d64166c5b7"
            ]
        ]
    },
    {
        "id": "181e7aa4a63abde2",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Initialisation",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "1ca76d30e63179c6",
                "a408d7b67144f1e5",
                "d68b232ff2f059c2",
                "2e675cc216a0356e"
            ]
        ]
    },
    {
        "id": "1ca76d30e63179c6",
        "type": "http request",
        "z": "ac8c146e2c7dd888",
        "name": "GET Carbon Intensity",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.electricitymap.org/v3/carbon-intensity/latest?zone=DE",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "7f23091a53b74482"
            ]
        ]
    },
    {
        "id": "5e594d87a11eb3e3",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 60,
        "wires": []
    },
    {
        "id": "7f23091a53b74482",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Set Carbon Intensity Factor",
        "func": "var carbonIntensity = msg.payload['carbonIntensity']\nglobal.set(\"carbonIntensity\", carbonIntensity); // gCO2eq / kWh\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "5e594d87a11eb3e3"
            ]
        ]
    },
    {
        "id": "a408d7b67144f1e5",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Set Energy Variables",
        "func": "global.set(\"energyInfrared\", 0);\nglobal.set(\"energyHeatingMat1\", 0);\nglobal.set(\"energyHeatingMat2\", 0);\nglobal.set(\"energyHeatingMatFiber\", 0);\nglobal.set(\"energyHeatingNozzle\", 0);\nglobal.set(\"energyLaser\", 0);\nglobal.set(\"energyMotor1\", 0);\nglobal.set(\"energyMotor2\", 0);\nglobal.set(\"energyMotor3\", 0);\nglobal.set(\"energyMotor4\", 0);\nglobal.set(\"energyMotor5\", 0);\nglobal.set(\"energyMotor6\", 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "df3588c6e5b182d7",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "e7149dd35393afcc"
            ]
        ]
    },
    {
        "id": "e7149dd35393afcc",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Energy Emission Calculation",
        "func": "// Infrarotheizung\nvar emissionInfrared = parseFloat(global.get(\"energyInfrared\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Heizmatte 1 (Bauplattform)\nvar emissionHeatingMat1= parseFloat(global.get(\"energyHeatingMat1\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Heizmatte 2 (Pulverplattform)\nvar emissionHeatingMat2= parseFloat(global.get(\"energyHeatingMat2\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Heizmatte 3 (Faserintegration)\nvar emissionHeatingMatFiber= parseFloat(global.get(\"energyHeatingMatFiber\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Düsenheizung\nvar emissionHeatingNozzle= parseFloat(global.get(\"energyHeatingNozzle\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Laser\nvar emissionLaser= parseFloat(global.get(\"energyLaser\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Ventilator -> Grundlast\n\n// Motor 1 (Bauplattform)\nvar emissionMotor1= parseFloat(global.get(\"energyMotor1\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 2 (Vorratsplattform)\nvar emissionMotor2= parseFloat(global.get(\"energyMotor2\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 3 (Düse X-Achse)\nvar emissionMotor3= parseFloat(global.get(\"energyMotor3\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 4 (Düse Y-Achse)\nvar emissionMotor4= parseFloat(global.get(\"energyMotor4\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 5 (Rakel)\nvar emissionMotor5= parseFloat(global.get(\"energyMotor5\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 6 (Faservorschub)\nvar emissionMotor6= parseFloat(global.get(\"energyMotor6\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n\n//Gesamtemissionen Energie\nvar emissionEnergy = emissionInfrared + emissionHeatingMat1 + emissionHeatingMat2 + emissionHeatingMatFiber + emissionHeatingNozzle + emissionLaser + emissionMotor1+emissionMotor2+emissionMotor3+emissionMotor4+emissionMotor5+emissionMotor6;\n\n// Gesamtemissionen für Gesamtemissionenschaubild\nvar emissionTotal = emissionEnergy + parseFloat(global.get(\"emissionMaterial\"));\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Energy Emissions\",\n        fields: {\n            emissionInfrared:emissionInfrared,\n            emissionHeatingMat1:emissionHeatingMat1,\n            emissionHeatingMat2:emissionHeatingMat2,\n            emissionHeatingMatFiber:emissionHeatingMatFiber,\n            emissionHeatingNozzle:emissionHeatingNozzle,\n            emissionLaser:emissionLaser,\n            emissionMotorBuild:emissionMotor1,\n            emissionMotorReservoir:emissionMotor2,\n            emissionMotorNozzleX:emissionMotor3,\n            emissionMotorNozzleY:emissionMotor4,\n            emissionMotorDoctor:emissionMotor5,\n            emissionMotorFiber:emissionMotor6,\n            emissionEnergy:emissionEnergy,\n            emissionTotal:emissionTotal\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 620,
        "wires": [
            [
                "17cb7d7834554171",
                "17ec9e82a9ebb115"
            ]
        ]
    },
    {
        "id": "17ec9e82a9ebb115",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 580,
        "wires": []
    },
    {
        "id": "17cb7d7834554171",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 660,
        "wires": []
    },
    {
        "id": "1a2e5293afb2a090",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Material Emission Calculation",
        "func": "var emissionPowder = parseFloat(global.get(\"emissionPowder\")) * (parseFloat(global.get(\"weightPowder\"))/1000); // kg\nvar emissionFiber = parseFloat(global.get(\"emissionFiber\")) * parseFloat(global.get(\"lengthFiber\")) * 100 * Math.pow(parseFloat(global.get(\"diameterFiber\"))/2, 2) * Math.PI * parseFloat(global.get(\"densityFiber\")) / 1000;\n\nvar emissionMaterial = emissionPowder+emissionFiber;\nglobal.set(\"emissionMaterial\", emissionMaterial);\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Material Emission\",\n        fields: {\n            emissionPowder:emissionPowder,\n            emissionFiber:emissionFiber,\n            emissionMaterial:emissionMaterial\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 900,
        "wires": [
            [
                "ddc971e5a0b0e8b6",
                "d4f49b4716bf3570"
            ]
        ]
    },
    {
        "id": "dfc83d3b57f8e172",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "1a2e5293afb2a090"
            ]
        ]
    },
    {
        "id": "ddc971e5a0b0e8b6",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 860,
        "wires": []
    },
    {
        "id": "d4f49b4716bf3570",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 940,
        "wires": []
    },
    {
        "id": "5a980db24a0c8eaf",
        "type": "csv",
        "z": "ac8c146e2c7dd888",
        "name": "Convert CSV",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "c6e56daa0c732e69"
            ]
        ]
    },
    {
        "id": "2e675cc216a0356e",
        "type": "file in",
        "z": "ac8c146e2c7dd888",
        "name": "Read File",
        "filename": "/Users/adriangrimm/Downloads/Input_Material.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 240,
        "wires": [
            [
                "5a980db24a0c8eaf"
            ]
        ]
    },
    {
        "id": "5c7fb3c5faf910b0",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 240,
        "wires": []
    },
    {
        "id": "c6e56daa0c732e69",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Set Material Variables",
        "func": "global.set(\"weightPowder\", msg.payload.weightPowder); // g\nglobal.set(\"volumePowder\", msg.payload.volumePowder); // l\nglobal.set(\"lengthFiber\", msg.payload.lengthFiber); // m\nglobal.set(\"component\", msg.payload.component);\nglobal.set(\"diameterFiber\", msg.payload.diameterFiber); // cm\nglobal.set(\"densityFiber\", msg.payload.densityFiber); // g/cm3\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            [
                "5c7fb3c5faf910b0"
            ]
        ]
    },
    {
        "id": "12497e998f77884c",
        "type": "function",
        "z": "ac8c146e2c7dd888",
        "name": "Component Information",
        "func": "\nmsg.payload = [\n    {\n        measurement: \"Component Info\",\n        fields: {\n            component:global.get(\"component\"),\n            volumePowder:global.get(\"volumePowder\"),\n            weightPowder:global.get(\"weightPowder\"),\n            lengthFiber:global.get(\"lengthFiber\"),\n            thicknessLayer:global.get(\"rLayerThickness\")\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1320,
        "wires": [
            [
                "030fa16f8d52a613",
                "a295468002805703"
            ]
        ]
    },
    {
        "id": "c638640bc39b1320",
        "type": "inject",
        "z": "ac8c146e2c7dd888",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1320,
        "wires": [
            [
                "12497e998f77884c"
            ]
        ]
    },
    {
        "id": "030fa16f8d52a613",
        "type": "influxdb batch",
        "z": "ac8c146e2c7dd888",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 1280,
        "wires": []
    },
    {
        "id": "a295468002805703",
        "type": "debug",
        "z": "ac8c146e2c7dd888",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1360,
        "wires": []
    },
    {
        "id": "7723db6dafb4e6f7",
        "type": "ads-client-connection-status",
        "z": "b35df062de91c24c",
        "name": "SLS ADS Status",
        "connection": "3953286b03d613bb",
        "showInput": false,
        "inputs": 0,
        "x": 400,
        "y": 40,
        "wires": [
            [
                "ae4bf34b48e44d75"
            ]
        ]
    },
    {
        "id": "ae4bf34b48e44d75",
        "type": "debug",
        "z": "b35df062de91c24c",
        "name": "SLS ADS Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 40,
        "wires": []
    },
    {
        "id": "362f3fd2a8c357a1",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 100,
        "wires": [
            [
                "4dc974ab01387509"
            ]
        ]
    },
    {
        "id": "5b91ecbb09f9d537",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 160,
        "wires": [
            [
                "4dc974ab01387509"
            ]
        ]
    },
    {
        "id": "557b0f36dd0c9322",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "4dc974ab01387509"
            ]
        ]
    },
    {
        "id": "2afa14a0c342f027",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iBuildPlatformCurrent = msg.payload;\nglobal.set(\"iBuildPlatformCurrent\", iBuildPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4dc974ab01387509",
        "type": "debug",
        "z": "b35df062de91c24c",
        "name": "Debug needed Variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "edba918d3e2cb7fe",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iReservoirPlatformCurrent = msg.payload;\nglobal.set(\"iReservoirPlatformCurrent\", iReservoirPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "1352df1e9bd83567",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iNozzleXAxisCurrent = msg.payload;\nglobal.set(\"iNozzleXAxisCurrent\", iNozzleXAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d1a249a736c3335c",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iNozzleYAxisCurrent = msg.payload;\nglobal.set(\"iNozzleYAxisCurrent\", iNozzleYAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d77bdab164681b13",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iDoctorBladeCurrent = msg.payload;\nglobal.set(\"iDoctorBladeCurrent\", iDoctorBladeCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "58c75df55352e299",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iFiberTransportIntegrationUnitCurrent = msg.payload;\nglobal.set(\"iFiberTransportIntegrationUnitCurrent\", iFiberTransportIntegrationUnitCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "4d832d771f50da74",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var rPT100_Building = msg.payload;\nglobal.set(\"rPT100_Building\", rPT100_Building);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "139b64a6478465a8",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var rPT100_Nozzle = msg.payload;\nglobal.set(\"rPT100_Nozzle\", rPT100_Nozzle);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f987664f5856a1a3",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var rPT100_Fiber = msg.payload;\nglobal.set(\"rPT100_Fiber\", rPT100_Fiber);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "f228517998226e35",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var rTemperatureSurface = msg.payload;\nglobal.set(\"rTemperatureSurface\", rTemperatureSurface);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "6bbd9392673d7fc3",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iPowerInfrared1",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iPowerInfrared1",
        "x": 400,
        "y": 100,
        "wires": [
            [
                "362f3fd2a8c357a1"
            ]
        ]
    },
    {
        "id": "36c3f78a5ae16e98",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iPowerInfrared2",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iPowerInfrared2",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "5b91ecbb09f9d537"
            ]
        ]
    },
    {
        "id": "1570f085645dd598",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iPowerInfrared3",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iPowerInfrared3",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "557b0f36dd0c9322"
            ]
        ]
    },
    {
        "id": "366b4b1792cf1639",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "rTemperatureSurface",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rTemperatureSurface",
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "f228517998226e35"
            ]
        ]
    },
    {
        "id": "8089bdaa857e4784",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "rPT100_Fiber",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rPT100_Fiber",
        "x": 400,
        "y": 1060,
        "wires": [
            [
                "f987664f5856a1a3"
            ]
        ]
    },
    {
        "id": "b9c3c8e535023112",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "rPT100_Nozzle",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rPT100_Nozzle",
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "139b64a6478465a8"
            ]
        ]
    },
    {
        "id": "7ce15e9e0d0190a1",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "rPT100_Building",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rPT100_Building",
        "x": 400,
        "y": 940,
        "wires": [
            [
                "4d832d771f50da74"
            ]
        ]
    },
    {
        "id": "c2c6438d7be2434a",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iFiberTransportIntegrationUnitCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iFiberTransportIntegrationUnitCurrent",
        "x": 470,
        "y": 880,
        "wires": [
            [
                "58c75df55352e299"
            ]
        ]
    },
    {
        "id": "af974bd8448e10ba",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iDoctorBladeCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iDoctorBladeCurrent",
        "x": 420,
        "y": 820,
        "wires": [
            [
                "d77bdab164681b13"
            ]
        ]
    },
    {
        "id": "b7c977f74aeddc85",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iNozzleYAxisCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iNozzleYAxisCurrent",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "d1a249a736c3335c"
            ]
        ]
    },
    {
        "id": "ec21959c0b02c5cb",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iNozzleXAxisCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iNozzleXAxisCurrent",
        "x": 420,
        "y": 700,
        "wires": [
            [
                "1352df1e9bd83567"
            ]
        ]
    },
    {
        "id": "420387db09d17a5b",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iReservoirPlatformCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iReservoirPlatformCurrent",
        "x": 430,
        "y": 640,
        "wires": [
            [
                "edba918d3e2cb7fe"
            ]
        ]
    },
    {
        "id": "a7f74a5b4decfb8e",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iBuildPlatformCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iBuildPlatformCurrent",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "2afa14a0c342f027"
            ]
        ]
    },
    {
        "id": "9be12cd992865190",
        "type": "inject",
        "z": "b35df062de91c24c",
        "name": "Abfrageintervall",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "6bbd9392673d7fc3",
                "36c3f78a5ae16e98",
                "1570f085645dd598",
                "a7f74a5b4decfb8e",
                "420387db09d17a5b",
                "ec21959c0b02c5cb",
                "b7c977f74aeddc85",
                "af974bd8448e10ba",
                "c2c6438d7be2434a",
                "7ce15e9e0d0190a1",
                "b9c3c8e535023112",
                "8089bdaa857e4784",
                "366b4b1792cf1639",
                "ceb30504146944e5",
                "2bb2de40d03e5a39",
                "db8f084da642ca61",
                "8b70028a33485dd6",
                "2434978a2c7382bc",
                "26f799f39769b46a",
                "9b75ff5d157af56f",
                "cad1a95d2e841d7b",
                "7523a4986dcb7d4a",
                "8d657df51bee0bc9"
            ]
        ]
    },
    {
        "id": "ceb30504146944e5",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iStateTemperatureControlling",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iStateTemperatureControlling",
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "feefe8d12fbb29c0"
            ]
        ]
    },
    {
        "id": "feefe8d12fbb29c0",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iStateTemperatrueControlling = msg.payload;\nglobal.set(\"iStateTemperatrueControlling\", iStateTemperatrueControlling);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "2bb2de40d03e5a39",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "bRelaisHeatingMat1",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatingMat1",
        "x": 420,
        "y": 280,
        "wires": [
            [
                "5409f572331663a6"
            ]
        ]
    },
    {
        "id": "db8f084da642ca61",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "bRelaisHeatingMat2",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatingMat2",
        "x": 420,
        "y": 340,
        "wires": [
            [
                "95998cc1a9693d9c"
            ]
        ]
    },
    {
        "id": "8b70028a33485dd6",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "bRelaisHeatingFiber",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatingMatFiber",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "4b7f8730a74c9239"
            ]
        ]
    },
    {
        "id": "2434978a2c7382bc",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "bRelaisHeatNozzle",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatNozzle",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "e70a7b1d352e6edb"
            ]
        ]
    },
    {
        "id": "26f799f39769b46a",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "bLaserDI0",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bLaserDI0",
        "x": 390,
        "y": 520,
        "wires": [
            [
                "fe4091a15879723c"
            ]
        ]
    },
    {
        "id": "5409f572331663a6",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "95998cc1a9693d9c",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4b7f8730a74c9239",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingFiber\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e70a7b1d352e6edb",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatNozzle\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "fe4091a15879723c",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "global.set(\"bLaserDI0\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "9b75ff5d157af56f",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iGeneralMachineState",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iGeneralMachineState",
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "467e8b3e4b4c4c3b"
            ]
        ]
    },
    {
        "id": "cad1a95d2e841d7b",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iTotalLayers",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iTotalLayers",
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "2af988a8a79dccb3"
            ]
        ]
    },
    {
        "id": "7523a4986dcb7d4a",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "iCurrentLayer",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iCurrentLayer",
        "x": 400,
        "y": 1360,
        "wires": [
            [
                "bad7d2571e944ca0"
            ]
        ]
    },
    {
        "id": "467e8b3e4b4c4c3b",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iGeneralMachineState = msg.payload;\nglobal.set(\"iGeneralMachineState\", iGeneralMachineState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "2af988a8a79dccb3",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iTotalLayers = msg.payload;\nglobal.set(\"iTotalLayers\", iTotalLayers);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "bad7d2571e944ca0",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var iCurrentLayer = msg.payload;\nglobal.set(\"iCurrentLayer\", iCurrentLayer);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "8d657df51bee0bc9",
        "type": "ads-client-read-symbol",
        "z": "b35df062de91c24c",
        "name": "rLayerThickness",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rLayerThickness",
        "x": 400,
        "y": 1420,
        "wires": [
            [
                "4ffbc30c154bb3b3"
            ]
        ]
    },
    {
        "id": "4ffbc30c154bb3b3",
        "type": "function",
        "z": "b35df062de91c24c",
        "name": "Set Global Variable",
        "func": "var rLayerThickness = msg.payload;\nglobal.set(\"rLayerThickness\", rLayerThickness);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "30a018e2e3c1a528",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "080847cf687b5b8d",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "af87c0aecb2e25c3",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "57e9726b286bf99d",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iBuildPlatformCurrent = msg.payload;\nglobal.set(\"iBuildPlatformCurrent\", iBuildPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a04a382609a4c668",
        "type": "debug",
        "z": "2d46b82c2bafaf69",
        "name": "Debug needed Variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "0f3cdf0a369e067e",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iReservoirPlatformCurrent = msg.payload;\nglobal.set(\"iReservoirPlatformCurrent\", iReservoirPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "0dd0015966b008b6",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iNozzleXAxisCurrent = msg.payload;\nglobal.set(\"iNozzleXAxisCurrent\", iNozzleXAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "60606a9b9e6d5880",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iNozzleYAxisCurrent = msg.payload;\nglobal.set(\"iNozzleYAxisCurrent\", iNozzleYAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "1f2c5fa62ddcceb8",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iDoctorBladeCurrent = msg.payload;\nglobal.set(\"iDoctorBladeCurrent\", iDoctorBladeCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "38f78b9dfd573c7e",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iFiberTransportIntegrationUnitCurrent = msg.payload;\nglobal.set(\"iFiberTransportIntegrationUnitCurrent\", iFiberTransportIntegrationUnitCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "95ef7b7427d34ceb",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iPowerInfrared1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1000",
        "payloadType": "num",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "30a018e2e3c1a528"
            ]
        ]
    },
    {
        "id": "a2cb4583692681bb",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iPowerInfrared2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "300",
        "payloadType": "str",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "080847cf687b5b8d"
            ]
        ]
    },
    {
        "id": "8eeef339c4ed3ce1",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iPowerInfrared3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "300",
        "payloadType": "num",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "af87c0aecb2e25c3"
            ]
        ]
    },
    {
        "id": "c7c55c56eb87a8a9",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iBuildPlatformCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "57e9726b286bf99d"
            ]
        ]
    },
    {
        "id": "c3f9c103bc7276d0",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iReservoirPlatformCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "200",
        "payloadType": "num",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "0f3cdf0a369e067e"
            ]
        ]
    },
    {
        "id": "ede10f2c937a51a4",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iNozzleXAxisCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "0dd0015966b008b6"
            ]
        ]
    },
    {
        "id": "04aa39edf9228a61",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iNozzleYAxisCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "60606a9b9e6d5880"
            ]
        ]
    },
    {
        "id": "939514c82bc5c980",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iDoctorBladeCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "200",
        "payloadType": "num",
        "x": 160,
        "y": 760,
        "wires": [
            [
                "1f2c5fa62ddcceb8"
            ]
        ]
    },
    {
        "id": "b9388a1d721b8818",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iFiberTransportIntegrationUnitCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "38f78b9dfd573c7e"
            ]
        ]
    },
    {
        "id": "414daff755a53c3f",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var rPT100_Building = msg.payload;\nglobal.set(\"rPT100_Building\", rPT100_Building);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "4101339ce284878e",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "rPT100_Building",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "40",
        "payloadType": "num",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "414daff755a53c3f"
            ]
        ]
    },
    {
        "id": "2fceb8bd32171648",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var rPT100_Nozzle = msg.payload;\nglobal.set(\"rPT100_Nozzle\", rPT100_Nozzle);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "9c79ea8fe8cc0ed8",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "rPT100_Nozzle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "2fceb8bd32171648"
            ]
        ]
    },
    {
        "id": "bcf7e62f26d9096c",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var rPT100_Fiber = msg.payload;\nglobal.set(\"rPT100_Fiber\", rPT100_Fiber);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "86ad99dd854c6c32",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "rPT100_Fiber",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "80",
        "payloadType": "num",
        "x": 140,
        "y": 1000,
        "wires": [
            [
                "bcf7e62f26d9096c"
            ]
        ]
    },
    {
        "id": "48ed9a87223b8e65",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var rTemperatureSurface = msg.payload;\nglobal.set(\"rTemperatureSurface\", rTemperatureSurface);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "33fa93bf4470621a",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "rTemperatureSurface",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "70",
        "payloadType": "num",
        "x": 160,
        "y": 1060,
        "wires": [
            [
                "48ed9a87223b8e65"
            ]
        ]
    },
    {
        "id": "f7d5ec791c8e4a82",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4d5d2ed6d56c88b8",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c4b6872968495f6a",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingFiber\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0bfff1be67fd1d92",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatNozzle\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "f63bb3197367de4f",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "global.set(\"bLaserDI0\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "907573be0a3e994f",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "bRelaisHeatingMat1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "f7d5ec791c8e4a82"
            ]
        ]
    },
    {
        "id": "3dbdaf41d7a6cf7b",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "bRelaisHeatingMat2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "4d5d2ed6d56c88b8"
            ]
        ]
    },
    {
        "id": "168c1e07dd8ec4ac",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "bRelaisHeatingFiber",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "c4b6872968495f6a"
            ]
        ]
    },
    {
        "id": "4c5764b1dfc9dd15",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "bRelaisHeatNozzle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "0bfff1be67fd1d92"
            ]
        ]
    },
    {
        "id": "19712ca5b779e84f",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "bLaserDI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "f63bb3197367de4f"
            ]
        ]
    },
    {
        "id": "1d371620279e9644",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iStateTemperatrueControlling = msg.payload;\nglobal.set(\"iStateTemperatrueControlling\", iStateTemperatrueControlling);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "9244cb2caad30ec0",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iStateTemperatrueControlling",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 190,
        "y": 1120,
        "wires": [
            [
                "285554861703976b"
            ]
        ]
    },
    {
        "id": "f10eb456d7eea007",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iGeneralMachineState = msg.payload;\nglobal.set(\"iGeneralMachineState\", iGeneralMachineState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "ae2f7b1f924bfa23",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iGeneralMachineState",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 1180,
        "wires": [
            [
                "815a203183e6d55c"
            ]
        ]
    },
    {
        "id": "561b15b06f5bc63e",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iTotalLayers = msg.payload;\nglobal.set(\"iTotalLayers\", iTotalLayers);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "f958e1338e73ca6b",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iTotalLayers",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "120",
        "payloadType": "num",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "561b15b06f5bc63e"
            ]
        ]
    },
    {
        "id": "a85ff1bf9088ae2f",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var iCurrentLayer = msg.payload;\nglobal.set(\"iCurrentLayer\", iCurrentLayer);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "fdaac708b8e7f627",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "iCurrentLayer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "49",
        "payloadType": "num",
        "x": 140,
        "y": 1300,
        "wires": [
            [
                "a85ff1bf9088ae2f"
            ]
        ]
    },
    {
        "id": "6e2944cbb88aaa7a",
        "type": "inject",
        "z": "2d46b82c2bafaf69",
        "name": "rLayerThickness",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.5",
        "payloadType": "num",
        "x": 150,
        "y": 1360,
        "wires": [
            [
                "6ec432c3c477f277"
            ]
        ]
    },
    {
        "id": "6ec432c3c477f277",
        "type": "function",
        "z": "2d46b82c2bafaf69",
        "name": "Set Global Variable",
        "func": "var rLayerThickness = msg.payload;\nglobal.set(\"rLayerThickness\", rLayerThickness);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "815a203183e6d55c",
        "type": "random",
        "z": "2d46b82c2bafaf69",
        "name": "",
        "low": "0",
        "high": "2",
        "inte": "true",
        "property": "payload",
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "f10eb456d7eea007"
            ]
        ]
    },
    {
        "id": "285554861703976b",
        "type": "random",
        "z": "2d46b82c2bafaf69",
        "name": "",
        "low": "0",
        "high": "4",
        "inte": "true",
        "property": "payload",
        "x": 440,
        "y": 1120,
        "wires": [
            [
                "1d371620279e9644"
            ]
        ]
    }
]