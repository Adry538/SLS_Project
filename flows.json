[
    {
        "id": "3155fc29ace33dcb",
        "type": "tab",
        "label": "main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed5a922bb126bd97",
        "type": "tab",
        "label": "ADS-Anbindung",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "acbe6deed3bf2340",
        "type": "tab",
        "label": "[TEST] ADS-Anbindung",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3953286b03d613bb",
        "type": "ads-client-connection",
        "name": "SLS",
        "targetAmsNetId": "172.22.168.11.1.1",
        "targetAdsPort": "851",
        "objectifyEnumerations": true,
        "convertDatesToJavascript": true,
        "readAndCacheSymbols": false,
        "readAndCacheDataTypes": false,
        "disableSymbolVersionMonitoring": false,
        "routerTcpPort": "48898",
        "routerAddress": "172.22.168.11",
        "localAddress": "",
        "localTcpPort": "",
        "localAmsNetId": "172.22.168.61.1.1",
        "localAdsPort": "32750",
        "timeoutDelay": "",
        "hideConsoleWarnings": false,
        "autoReconnect": true,
        "reconnectInterval": "",
        "checkStateInterval": "",
        "connectionDownDelay": "",
        "allowHalfOpen": false,
        "disableBigInt": false,
        "debuggingLevel": "",
        "bareClient": false
    },
    {
        "id": "19d3d373c748b635",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "f6c8b81ea62a84e7",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 300,
        "wires": []
    },
    {
        "id": "bd8c4fa4632e8aee",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "0895be440011be08"
            ]
        ]
    },
    {
        "id": "0895be440011be08",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Power Calculation",
        "func": "// Infrarotheizung\nvar powerInfrared1 = parseFloat(global.get(\"iPowerInfrared1\"));\nvar powerInfrared2 = parseFloat(global.get(\"iPowerInfrared2\"));\nvar powerInfrared3 = parseFloat(global.get(\"iPowerInfrared3\"));\nvar powerInfrared = powerInfrared1 + powerInfrared2 + powerInfrared3\n// Heizmatte 1 (Bauplattform)\nif (global.get(\"bRelaisHeatingMat1\")===true) {\n    var powerHeatingMat1 = 100;\n}\n// Heizmatte 2 (Pulverplattform)\nif (global.get(\"bRelaisHeatingMat2\")===true) {\n    var powerHeatingMat2 = 100;\n}\n// Heizmatte 3 (Faserintegration)\nif (global.get(\"bRelaisHeatingFiber\")===true) {\n    var powerHeatingMatFiber = 50;\n}\n// Düsenheizung\nif (global.get(\"bRelaisHeatNozzle\")===true) {\n    var powerHeatingNozzle = 50;\n}\n// Laser\nif (global.get(\"bLaserDI0\")===true) {\n    var powerLaser = 5;\n}\n// Ventilator -> Grundlast\n\n// Motor 1 (Bauplattform)\nvar powerMotor1=global.get(\"iBuildPlatformCurrent\")*230\n\n// Motor 2 (Vorratsplattform)\nvar powerMotor2=global.get(\"iReservoirPlatformCurrent\")*230\n// Motor 3 (Düse X-Achse)\nvar powerMotor3=global.get(\"iNozzleXAxisCurrent\")*230\n// Motor 4 (Düse Y-Achse)\nvar powerMotor4=global.get(\"iNozzleYAxisCurrent\")*230\n// Motor 5 (Rakel)\nvar powerMotor5 = global.get(\"iDoctorBladeCurrent\")*230\n// Motor 6 (Faservorschub)\nvar powerMotor6=global.get(\"iFiberTransportIntegrationUnitCurrent\")*230\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Power\",\n        fields: {\n            powerInfrared:powerInfrared,\n            powerHeatingMat1:powerHeatingMat1,\n            powerHeatingMat2:powerHeatingMat2,\n            powerHeatingMatFiber:powerHeatingMatFiber,\n            powerHeatingNozzle:powerHeatingNozzle,\n            powerLaser:powerLaser,\n            powerMotorBuild:powerMotor1,\n            powerMotorReservoir:powerMotor2,\n            powerMotorNozzleX:powerMotor3,\n            powerMotorNozzleY:powerMotor4,\n            powerMotorDoctor:powerMotor5,\n            powerMotorFiber:powerMotor6\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "6cc982fa45d84a4d",
                "f6c8b81ea62a84e7"
            ]
        ]
    },
    {
        "id": "a031969e1282aa23",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Material Calculation",
        "func": "var powderWeight = parseFloat(global.get(\"powderWeight\"))\nvar powderVolume = parseFloat(global.get(\"powderVolume\"))\nvar fiberLength = parseFloat(global.get(\"fiberLength\"))\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Material\",\n        fields: {\n            powderWeight:powderWeight,\n            powderVolume:powderVolume,\n            fiberLength:fiberLength\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "d68cb4af46af98cc",
                "e970d75db2b2b3ae"
            ]
        ]
    },
    {
        "id": "6c2597ba69501fee",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Temperature Monitoring",
        "func": "// Temperatur Gehäuse\nvar tempBuilding = global.get(\"rPT100_Building\")\n// Temperatur Düse\nvar tempNozzle = global.get(\"rPT100_Nozzle\")\n// Temperatur Faserintegrationseinheit\nvar tempFaser = global.get(\"rPT100_Fiber\")\n// Temperature Pulveroberfläche\nvar tempSurface = global.get(\"rTemperatureSurface\")\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Temperature\",\n        fields: {\n            tempBuilding:tempBuilding,\n            tempNozzle:tempNozzle,\n            tempFaser:tempFaser,\n            tempSurface:tempSurface\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1040,
        "wires": [
            [
                "9db33c57dcb77e80",
                "8b7bd0d68c046b50"
            ]
        ]
    },
    {
        "id": "6cc982fa45d84a4d",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "a3bb0340e0a914aa",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "a031969e1282aa23"
            ]
        ]
    },
    {
        "id": "d68cb4af46af98cc",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 720,
        "wires": []
    },
    {
        "id": "e970d75db2b2b3ae",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 800,
        "wires": []
    },
    {
        "id": "673b1558530a83f5",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "6c2597ba69501fee"
            ]
        ]
    },
    {
        "id": "8b7bd0d68c046b50",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9db33c57dcb77e80",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1080,
        "wires": []
    },
    {
        "id": "a7713f01a6a72562",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1180,
        "wires": [
            [
                "3271dbdc818b6471"
            ]
        ]
    },
    {
        "id": "3271dbdc818b6471",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Process Monitoring",
        "func": "// Genereller Maschinenstatus\nvar machineState = global.get(\"iGeneralMachineState\")\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\n// Aktuelle Schicht\nvar currentLayer = global.get(\"iCurrentLayer\")\n\n// Gesamtanzahl Schichten\nvar totalLayers = global.get(\"iTotalLayers\")\n\n// Aktueller Prozess in Diagramm anzeigen\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var idle = 1;\n        var heatUp = 0;\n        var coolDown = 0;\n        var fiberIntegration = 0;\n        break;\n    case 1:\n        var idle = 0;\n        var heatUp = 1;\n        var coolDown = 0;\n        var fiberIntegration = 0;\n        break;\n    case 2:\n        var idle = 0;\n        var heatUp = 0;\n        var coolDown = 1;\n        var fiberIntegration = 0;\n        break;\n    case 3:\n        var idle = 0;\n        var heatUp = 0;\n        var coolDown = 0;\n        var fiberIntegration = 1;\n        break;\n}\n\nmsg.payload = [\n    {\n        measurement: \"Process Monitoring\",\n        fields: {\n            machineState:machineState,\n            process:parseFloat(global.get(\"iStateTemperatrueControlling\")),\n            component:component,\n            currentLayer:currentLayer,\n            totalLayers:totalLayers,\n            idle:idle,\n            heatUp:heatUp,\n            coolDown:coolDown,\n            fiberIntegration:fiberIntegration\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1180,
        "wires": [
            [
                "de663d947aedac7f",
                "1246c50191855216"
            ]
        ]
    },
    {
        "id": "1246c50191855216",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1220,
        "wires": []
    },
    {
        "id": "de663d947aedac7f",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 1140,
        "wires": []
    },
    {
        "id": "b14b0b73f2335a9c",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Set Emission Values",
        "func": "global.set(\"emissionPowder\", 6.9); // kg/kg, PA12\nglobal.set(\"emissionFiber\", 19.849); // kg/kg, 1k roving\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "319b10ab5bcab8c5",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 440,
        "wires": []
    },
    {
        "id": "aa8ddc1603ece9fa",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 520,
        "wires": []
    },
    {
        "id": "373116f216ab147c",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Energy Calculation",
        "func": "// Infrarotheizung\nvar powerInfrared1 = parseFloat(global.get(\"iPowerInfrared1\"));\nvar powerInfrared2 = parseFloat(global.get(\"iPowerInfrared2\"));\nvar powerInfrared3 = parseFloat(global.get(\"iPowerInfrared3\"));\nvar energyInfrared = parseFloat(global.get(\"energyInfrared\")) + (powerInfrared1+powerInfrared2+powerInfrared3)*(5/3600);\nglobal.set(\"energyInfrared\", energyInfrared)\nvar emissionInfrared = energyInfrared * parseFloat(global.get(\"carbonIntensity\"));\n// Heizmatte 1 (Bauplattform)\nif (global.get(\"bRelaisHeatingMat1\")===true) {\n    var powerHeatingMat1 = 100;\n    var energyHeatingMat1 = parseFloat(global.get(\"energyHeatingMat1\"))+(powerHeatingMat1 * (5 / 3600)); // Wh\n    global.set(\"energyHeatingMat1\", energyHeatingMat1);\n}\n// Heizmatte 2 (Pulverplattform)\nif (global.get(\"bRelaisHeatingMat2\")===true) {\n    var powerHeatingMat2 = 100;\n    var energyHeatingMat2 = parseFloat(global.get(\"energyHeatingMat2\"))+(powerHeatingMat2 * (5 / 3600)); // Wh\n    global.set(\"energyHeatingMat2\", energyHeatingMat2);\n}\n// Heizmatte 3 (Faserintegration)\nif (global.get(\"bRelaisHeatingFiber\")===true) {\n    var powerHeatingMatFiber = 50;\n    var energyHeatingMatFiber = parseFloat(global.get(\"energyHeatingMatFiber\"))+(powerHeatingMatFiber * (5 / 3600)); // Wh\n    global.set(\"energyHeatingMatFiber\", energyHeatingMatFiber);\n}\n// Düsenheizung\nif (global.get(\"bRelaisHeatNozzle\")===true) {\n    var powerHeatingNozzle = 50;\n    var energyHeatingNozzle = parseFloat(global.get(\"energyHeatingNozzle\"))+(powerHeatingNozzle * (5 / 3600)); // Wh\n    global.set(\"energyHeatingNozzle\", energyHeatingNozzle);\n}\n// Laser\nif (global.get(\"bLaserDI0\")===true) {\n    var powerLaser = 5;\n    var energyLaser = parseFloat(global.get(\"energyLaser\"))+(powerLaser * (5 / 3600)); // Wh\n    global.set(\"energyLaser\",energyLaser);\n}\n// Ventilator -> Grundlast\n\n// Motor 1 (Bauplattform)\nvar powerMotor1=global.get(\"iBuildPlatformCurrent\")*230;\nvar energyMotor1 = parseFloat(global.get(\"energyMotor1\"))+(powerMotor1 * (5/3600)); // Wh\nglobal.set(\"energyMotor1\",energyMotor1);\n// Motor 2 (Vorratsplattform)\nvar powerMotor2=global.get(\"iReservoirPlatformCurrent\")*230;\nvar energyMotor2 = parseFloat(global.get(\"energyMotor2\"))+(powerMotor2 * (5/3600)); // Wh\nglobal.set(\"energyMotor2\",energyMotor2);\n// Motor 3 (Düse X-Achse)\nvar powerMotor3=global.get(\"iNozzleXAxisCurrent\")*230;\nvar energyMotor3 = parseFloat(global.get(\"energyMotor3\"))+(powerMotor3 * (5/3600)); // Wh\nglobal.set(\"energyMotor3\",energyMotor3);\n// Motor 4 (Düse Y-Achse)\nvar powerMotor4=global.get(\"iNozzleYAxisCurrent\")*230;\nvar energyMotor4 = parseFloat(global.get(\"energyMotor4\"))+(powerMotor4 * (5/3600)); // Wh\nglobal.set(\"energyMotor4\",energyMotor4);\n// Motor 5 (Rakel)\nvar powerMotor5 = global.get(\"iDoctorBladeCurrent\")*230;\nvar energyMotor5 = parseFloat(global.get(\"energyMotor5\"))+(powerMotor5 * (5/3600)); // Wh\nglobal.set(\"energyMotor5\",energyMotor5);\n// Motor 6 (Faservorschub)\nvar powerMotor6=global.get(\"iFiberTransportIntegrationUnitCurrent\")*230;\nvar energyMotor6 = parseFloat(global.get(\"energyMotor6\"))+(powerMotor6 * (5/3600)); // Wh\nglobal.set(\"energyMotor6\",energyMotor6);\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Energy\",\n        fields: {\n            energyInfrared:energyInfrared,\n            energyHeatingMat1:energyHeatingMat1,\n            energyHeatingMat2:energyHeatingMat2,\n            energyHeatingMatFiber:energyHeatingMatFiber,\n            energyHeatingNozzle:energyHeatingNozzle,\n            energyLaser:energyLaser,\n            energyMotorBuild:energyMotor1,\n            energyMotorReservoir:energyMotor2,\n            energyMotorNozzleX:energyMotor3,\n            energyMotorNozzleY:energyMotor4,\n            energyMotorDoctor:energyMotor5,\n            energyMotorFiber:energyMotor6\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 480,
        "wires": [
            [
                "319b10ab5bcab8c5",
                "aa8ddc1603ece9fa"
            ]
        ]
    },
    {
        "id": "014b6dcf802afb5a",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "373116f216ab147c"
            ]
        ]
    },
    {
        "id": "a4a406a701ea7380",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Initialisation",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "5e52bdbe8fb1a36b",
                "5a3fc5146f588100",
                "b14b0b73f2335a9c",
                "49fc71c01c2a1451"
            ]
        ]
    },
    {
        "id": "5e52bdbe8fb1a36b",
        "type": "http request",
        "z": "3155fc29ace33dcb",
        "name": "GET Carbon Intensity",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.electricitymap.org/v3/carbon-intensity/latest?zone=DE",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "a1d5192eda2bda35"
            ]
        ]
    },
    {
        "id": "eddf4ee977b74842",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 60,
        "wires": []
    },
    {
        "id": "a1d5192eda2bda35",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Set Carbon Intensity Factor",
        "func": "var carbonIntensity = msg.payload['carbonIntensity']\nglobal.set(\"carbonIntensity\", carbonIntensity); // gCO2eq / kWh\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "eddf4ee977b74842"
            ]
        ]
    },
    {
        "id": "5a3fc5146f588100",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Set Energy Variables",
        "func": "global.set(\"energyInfrared\", 0);\nglobal.set(\"energyHeatingMat1\", 0);\nglobal.set(\"energyHeatingMat2\", 0);\nglobal.set(\"energyHeatingMatFiber\", 0);\nglobal.set(\"energyHeatingNozzle\", 0);\nglobal.set(\"energyLaser\", 0);\nglobal.set(\"energyMotor1\", 0);\nglobal.set(\"energyMotor2\", 0);\nglobal.set(\"energyMotor3\", 0);\nglobal.set(\"energyMotor4\", 0);\nglobal.set(\"energyMotor5\", 0);\nglobal.set(\"energyMotor6\", 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "eebe51e2ac187d66",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "03f5c88fccd514d3"
            ]
        ]
    },
    {
        "id": "03f5c88fccd514d3",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Energy Emission Calculation",
        "func": "// Infrarotheizung\nvar emissionInfrared = parseFloat(global.get(\"energyInfrared\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Heizmatte 1 (Bauplattform)\nvar emissionHeatingMat1= parseFloat(global.get(\"energyHeatingMat1\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Heizmatte 2 (Pulverplattform)\nvar emissionHeatingMat2= parseFloat(global.get(\"energyHeatingMat2\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Heizmatte 3 (Faserintegration)\nvar emissionHeatingMatFiber= parseFloat(global.get(\"energyHeatingMatFiber\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Düsenheizung\nvar emissionHeatingNozzle= parseFloat(global.get(\"energyHeatingNozzle\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Laser\nvar emissionLaser= parseFloat(global.get(\"energyLaser\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Ventilator -> Grundlast\n\n// Motor 1 (Bauplattform)\nvar emissionMotor1= parseFloat(global.get(\"energyMotor1\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 2 (Vorratsplattform)\nvar emissionMotor2= parseFloat(global.get(\"energyMotor2\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 3 (Düse X-Achse)\nvar emissionMotor3= parseFloat(global.get(\"energyMotor3\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 4 (Düse Y-Achse)\nvar emissionMotor4= parseFloat(global.get(\"energyMotor4\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 5 (Rakel)\nvar emissionMotor5= parseFloat(global.get(\"energyMotor5\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n// Motor 6 (Faservorschub)\nvar emissionMotor6= parseFloat(global.get(\"energyMotor6\")) * parseFloat(global.get(\"carbonIntensity\")) / 1000;\n\n//Gesamtemissionen Energie\nvar emissionEnergy = emissionInfrared + emissionHeatingMat1 + emissionHeatingMat2 + emissionHeatingMatFiber + emissionHeatingNozzle + emissionLaser + emissionMotor1+emissionMotor2+emissionMotor3+emissionMotor4+emissionMotor5+emissionMotor6;\n\n// Gesamtemissionen für Gesamtemissionenschaubild\nvar emissionTotal = emissionEnergy + parseFloat(global.get(\"emissionMaterial\"));\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Energy Emissions\",\n        fields: {\n            emissionInfrared:emissionInfrared,\n            emissionHeatingMat1:emissionHeatingMat1,\n            emissionHeatingMat2:emissionHeatingMat2,\n            emissionHeatingMatFiber:emissionHeatingMatFiber,\n            emissionHeatingNozzle:emissionHeatingNozzle,\n            emissionLaser:emissionLaser,\n            emissionMotorBuild:emissionMotor1,\n            emissionMotorReservoir:emissionMotor2,\n            emissionMotorNozzleX:emissionMotor3,\n            emissionMotorNozzleY:emissionMotor4,\n            emissionMotorDoctor:emissionMotor5,\n            emissionMotorFiber:emissionMotor6,\n            emissionEnergy:emissionEnergy,\n            emissionTotal:emissionTotal\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 620,
        "wires": [
            [
                "5964070911023324",
                "c79e20a7fe9b03cf"
            ]
        ]
    },
    {
        "id": "c79e20a7fe9b03cf",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 580,
        "wires": []
    },
    {
        "id": "5964070911023324",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 660,
        "wires": []
    },
    {
        "id": "047645cf0a9f4bbb",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Material Emission Calculation",
        "func": "var emissionPowder = parseFloat(global.get(\"emissionPowder\")) * (parseFloat(global.get(\"weightPowder\"))/1000); // kg\nvar emissionFiber = parseFloat(global.get(\"emissionFiber\")) * parseFloat(global.get(\"lengthFiber\")) * Math.pow(0.0007/2, 2) * Math.PI * 1.77 / 1000;\n// density fiber: 1.77 g/cm3, fiber diameter: 0,007 mm\n\nvar emissionMaterial = emissionPowder+emissionFiber;\nglobal.set(\"emissionMaterial\", emissionMaterial);\n\n// Aktueller Prozessschritt\nswitch(global.get(\"iStateTemperatrueControlling\")) {\n    case 0:\n        var process = \"Idle\";\n        break;\n    case 1:\n        var process = \"Aufheizphase\";\n        break;\n    case 2:\n        var process = \"Abkühlphase\";\n        break;\n    case 3:\n        var process = \"Faserintegration\"\n        break;\n}\n\n// Bauteil\nvar component = global.get(\"component\")\n\nmsg.payload = [\n    {\n        measurement: \"Material Emission\",\n        fields: {\n            emissionPowder:emissionPowder,\n            emissionFiber:emissionFiber,\n            emissionMaterial:emissionMaterial\n        },\n        tags:{\n            process:process,\n            component:component\n        },\n        timestamp: new Date()\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 900,
        "wires": [
            [
                "0cf5c0dea6eb8453",
                "1ec5786b8cbca2e7"
            ]
        ]
    },
    {
        "id": "723a7bc378b42028",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "047645cf0a9f4bbb"
            ]
        ]
    },
    {
        "id": "0cf5c0dea6eb8453",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 860,
        "wires": []
    },
    {
        "id": "1ec5786b8cbca2e7",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 940,
        "wires": []
    },
    {
        "id": "5f4ba7b7ce99d4b8",
        "type": "csv",
        "z": "3155fc29ace33dcb",
        "name": "Convert CSV",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "59f450b4addc90ae"
            ]
        ]
    },
    {
        "id": "49fc71c01c2a1451",
        "type": "file in",
        "z": "3155fc29ace33dcb",
        "name": "Read File",
        "filename": "/Users/adriangrimm/Downloads/Input_Material.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 240,
        "wires": [
            [
                "5f4ba7b7ce99d4b8"
            ]
        ]
    },
    {
        "id": "7017b47d6977600a",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 240,
        "wires": []
    },
    {
        "id": "59f450b4addc90ae",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Set Material Variables",
        "func": "global.set(\"weightPowder\", msg.payload.weightPowder); // g\nglobal.set(\"volumePowder\", msg.payload.volumePowder); // l\nglobal.set(\"lengthFiber\", msg.payload.lengthFiber); // cm\nglobal.set(\"component\", msg.payload.component);\nglobal.set(\"crossSectionalAreaFiber\", 0.1);\nglobal.set(\"densityFiber\", 1.77); // g/cm3\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            [
                "7017b47d6977600a"
            ]
        ]
    },
    {
        "id": "014abca18116ab79",
        "type": "function",
        "z": "3155fc29ace33dcb",
        "name": "Component Information",
        "func": "\nmsg.payload = [\n    {\n        measurement: \"Component Info\",\n        fields: {\n            component:global.get(\"component\"),\n            volumePowder:global.get(\"volumePowder\"),\n            weightPowder:global.get(\"weightPowder\"),\n            lengthFiber:global.get(\"lengthFiber\"),\n            thicknessLayer:global.get(\"rLayerThickness\")\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1320,
        "wires": [
            [
                "8fb27e64bd2d2ddd",
                "3ad7d13470a18eae"
            ]
        ]
    },
    {
        "id": "5725caded0a2f29e",
        "type": "inject",
        "z": "3155fc29ace33dcb",
        "name": "Send Data to InfluxDB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1320,
        "wires": [
            [
                "014abca18116ab79"
            ]
        ]
    },
    {
        "id": "8fb27e64bd2d2ddd",
        "type": "influxdb batch",
        "z": "3155fc29ace33dcb",
        "influxdb": "19d3d373c748b635",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "KIT",
        "bucket": "SLS_Data",
        "x": 680,
        "y": 1280,
        "wires": []
    },
    {
        "id": "3ad7d13470a18eae",
        "type": "debug",
        "z": "3155fc29ace33dcb",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1360,
        "wires": []
    },
    {
        "id": "e8634bdf5693be6f",
        "type": "ads-client-connection-status",
        "z": "ed5a922bb126bd97",
        "name": "SLS ADS Status",
        "connection": "3953286b03d613bb",
        "showInput": false,
        "inputs": 0,
        "x": 400,
        "y": 40,
        "wires": [
            [
                "0daed83fcdaaf541"
            ]
        ]
    },
    {
        "id": "0daed83fcdaaf541",
        "type": "debug",
        "z": "ed5a922bb126bd97",
        "name": "SLS ADS Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 40,
        "wires": []
    },
    {
        "id": "fa8eff2047e11308",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "8506b4ce4abd3ff7",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b382369e19c81afa",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6f34985467b664f2",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iBuildPlatformCurrent = msg.payload;\nglobal.set(\"iBuildPlatformCurrent\", iBuildPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3babe7c99581d022",
        "type": "debug",
        "z": "ed5a922bb126bd97",
        "name": "Debug needed Variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "f2563b9df2d98a3c",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iReservoirPlatformCurrent = msg.payload;\nglobal.set(\"iReservoirPlatformCurrent\", iReservoirPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "085cff276f6467eb",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iNozzleXAxisCurrent = msg.payload;\nglobal.set(\"iNozzleXAxisCurrent\", iNozzleXAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "442765716c1e0a5a",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iNozzleYAxisCurrent = msg.payload;\nglobal.set(\"iNozzleYAxisCurrent\", iNozzleYAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "840f55f6b9e336b5",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iDoctorBladeCurrent = msg.payload;\nglobal.set(\"iDoctorBladeCurrent\", iDoctorBladeCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "02552fb901896a7d",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iFiberTransportIntegrationUnitCurrent = msg.payload;\nglobal.set(\"iFiberTransportIntegrationUnitCurrent\", iFiberTransportIntegrationUnitCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "917f59d9ee2ca4d2",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var rPT100_Building = msg.payload;\nglobal.set(\"rPT100_Building\", rPT100_Building);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "ba7e0b60aff21ddb",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var rPT100_Nozzle = msg.payload;\nglobal.set(\"rPT100_Nozzle\", rPT100_Nozzle);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "7571ea3c94ec3ab7",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var rPT100_Fiber = msg.payload;\nglobal.set(\"rPT100_Fiber\", rPT100_Fiber);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "6eafa036096de8a4",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var rTemperatureSurface = msg.payload;\nglobal.set(\"rTemperatureSurface\", rTemperatureSurface);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "1f8859c8347ee8a0",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iPowerInfrared1",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iPowerInfrared1",
        "x": 400,
        "y": 100,
        "wires": [
            [
                "fa8eff2047e11308"
            ]
        ]
    },
    {
        "id": "077a1a6f946dc4d9",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iPowerInfrared2",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iPowerInfrared2",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "8506b4ce4abd3ff7"
            ]
        ]
    },
    {
        "id": "41d48723cd2eb9ce",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iPowerInfrared3",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iPowerInfrared3",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "b382369e19c81afa"
            ]
        ]
    },
    {
        "id": "edb3d9714431bb8f",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "rTemperatureSurface",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rTemperatureSurface",
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "6eafa036096de8a4"
            ]
        ]
    },
    {
        "id": "3acb13f3afa03248",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "rPT100_Fiber",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rPT100_Fiber",
        "x": 400,
        "y": 1060,
        "wires": [
            [
                "7571ea3c94ec3ab7"
            ]
        ]
    },
    {
        "id": "843f7c93f5067d73",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "rPT100_Nozzle",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rPT100_Nozzle",
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "ba7e0b60aff21ddb"
            ]
        ]
    },
    {
        "id": "b39df9ad6344eb8d",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "rPT100_Building",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rPT100_Building",
        "x": 400,
        "y": 940,
        "wires": [
            [
                "917f59d9ee2ca4d2"
            ]
        ]
    },
    {
        "id": "745c7cddfb23ae8e",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iFiberTransportIntegrationUnitCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iFiberTransportIntegrationUnitCurrent",
        "x": 470,
        "y": 880,
        "wires": [
            [
                "02552fb901896a7d"
            ]
        ]
    },
    {
        "id": "8a97c1983d92d397",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iDoctorBladeCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iDoctorBladeCurrent",
        "x": 420,
        "y": 820,
        "wires": [
            [
                "840f55f6b9e336b5"
            ]
        ]
    },
    {
        "id": "58178cea05beacdb",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iNozzleYAxisCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iNozzleYAxisCurrent",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "442765716c1e0a5a"
            ]
        ]
    },
    {
        "id": "1ddb2299f543f696",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iNozzleXAxisCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iNozzleXAxisCurrent",
        "x": 420,
        "y": 700,
        "wires": [
            [
                "085cff276f6467eb"
            ]
        ]
    },
    {
        "id": "f31f605d5fb4e7a9",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iReservoirPlatformCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iReservoirPlatformCurrent",
        "x": 430,
        "y": 640,
        "wires": [
            [
                "f2563b9df2d98a3c"
            ]
        ]
    },
    {
        "id": "6f450b8360706f2e",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iBuildPlatformCurrent",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.iBuildPlatformCurrent",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "6f34985467b664f2"
            ]
        ]
    },
    {
        "id": "39af820d857a8ce2",
        "type": "inject",
        "z": "ed5a922bb126bd97",
        "name": "Abfrageintervall",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "1f8859c8347ee8a0",
                "077a1a6f946dc4d9",
                "41d48723cd2eb9ce",
                "6f450b8360706f2e",
                "f31f605d5fb4e7a9",
                "1ddb2299f543f696",
                "58178cea05beacdb",
                "8a97c1983d92d397",
                "745c7cddfb23ae8e",
                "b39df9ad6344eb8d",
                "843f7c93f5067d73",
                "3acb13f3afa03248",
                "edb3d9714431bb8f",
                "f37b6a91d3d4f699",
                "c7bb622809649406",
                "131bce551d106635",
                "035d6e25f04c67ee",
                "e29dbc010a7f0946",
                "54c5af227d95cd43",
                "3a85ef273fcb6604",
                "eb5156484047300f",
                "bbf8dcf1c58af18f",
                "33bfeb7cfda55271"
            ]
        ]
    },
    {
        "id": "f37b6a91d3d4f699",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iStateTemperatureControlling",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iStateTemperatureControlling",
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "4f8cae9d4cebdfd4"
            ]
        ]
    },
    {
        "id": "4f8cae9d4cebdfd4",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iStateTemperatrueControlling = msg.payload;\nglobal.set(\"iStateTemperatrueControlling\", iStateTemperatrueControlling);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "c7bb622809649406",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "bRelaisHeatingMat1",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatingMat1",
        "x": 420,
        "y": 280,
        "wires": [
            [
                "313ba23d5c8959f7"
            ]
        ]
    },
    {
        "id": "131bce551d106635",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "bRelaisHeatingMat2",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatingMat2",
        "x": 420,
        "y": 340,
        "wires": [
            [
                "94f8b6a4abbb3cf8"
            ]
        ]
    },
    {
        "id": "035d6e25f04c67ee",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "bRelaisHeatingFiber",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatingMatFiber",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "1f4e5d7cf02c15dc"
            ]
        ]
    },
    {
        "id": "e29dbc010a7f0946",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "bRelaisHeatNozzle",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bRelaisHeatNozzle",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "4e6d5392513e859c"
            ]
        ]
    },
    {
        "id": "54c5af227d95cd43",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "bLaserDI0",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_IO.bLaserDI0",
        "x": 390,
        "y": 520,
        "wires": [
            [
                "297840ac8c57bc50"
            ]
        ]
    },
    {
        "id": "313ba23d5c8959f7",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "94f8b6a4abbb3cf8",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1f4e5d7cf02c15dc",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingFiber\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "4e6d5392513e859c",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatNozzle\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "297840ac8c57bc50",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "global.set(\"bLaserDI0\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3a85ef273fcb6604",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iGeneralMachineState",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iGeneralMachineState",
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "7ac2405a9518f8e1"
            ]
        ]
    },
    {
        "id": "eb5156484047300f",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iTotalLayers",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iTotalLayers",
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "d0b065f4786f450f"
            ]
        ]
    },
    {
        "id": "bbf8dcf1c58af18f",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "iCurrentLayer",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.iCurrentLayer",
        "x": 400,
        "y": 1360,
        "wires": [
            [
                "ddfceae1b4b27bfe"
            ]
        ]
    },
    {
        "id": "7ac2405a9518f8e1",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iGeneralMachineState = msg.payload;\nglobal.set(\"iGeneralMachineState\", iGeneralMachineState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "d0b065f4786f450f",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iTotalLayers = msg.payload;\nglobal.set(\"iTotalLayers\", iTotalLayers);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "ddfceae1b4b27bfe",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var iCurrentLayer = msg.payload;\nglobal.set(\"iCurrentLayer\", iCurrentLayer);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "33bfeb7cfda55271",
        "type": "ads-client-read-symbol",
        "z": "ed5a922bb126bd97",
        "name": "rLayerThickness",
        "connection": "3953286b03d613bb",
        "variableName": "GVL_Standard.rLayerThickness",
        "x": 400,
        "y": 1420,
        "wires": [
            [
                "673e4010da19ac6c"
            ]
        ]
    },
    {
        "id": "673e4010da19ac6c",
        "type": "function",
        "z": "ed5a922bb126bd97",
        "name": "Set Global Variable",
        "func": "var rLayerThickness = msg.payload;\nglobal.set(\"rLayerThickness\", rLayerThickness);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "a09cdcc3aa8fd5d1",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "2f1d90a995ad7b86",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "1cb1f9560fdefc48",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"iPowerInfrared3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f0c1425278540125",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iBuildPlatformCurrent = msg.payload;\nglobal.set(\"iBuildPlatformCurrent\", iBuildPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "daa9289bc4f1f17f",
        "type": "debug",
        "z": "acbe6deed3bf2340",
        "name": "Debug needed Variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "0f7b1590c70ba0d9",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iReservoirPlatformCurrent = msg.payload;\nglobal.set(\"iReservoirPlatformCurrent\", iReservoirPlatformCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "cdb10623ecbf88ad",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iNozzleXAxisCurrent = msg.payload;\nglobal.set(\"iNozzleXAxisCurrent\", iNozzleXAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "67a952e63a931564",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iNozzleYAxisCurrent = msg.payload;\nglobal.set(\"iNozzleYAxisCurrent\", iNozzleYAxisCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "3385086c296f7fd2",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iDoctorBladeCurrent = msg.payload;\nglobal.set(\"iDoctorBladeCurrent\", iDoctorBladeCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "ce0157296b4a2d2a",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iFiberTransportIntegrationUnitCurrent = msg.payload;\nglobal.set(\"iFiberTransportIntegrationUnitCurrent\", iFiberTransportIntegrationUnitCurrent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "fb280cbc0c5def44",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iPowerInfrared1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "a09cdcc3aa8fd5d1"
            ]
        ]
    },
    {
        "id": "1c49df3f55713b28",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iPowerInfrared2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "2f1d90a995ad7b86"
            ]
        ]
    },
    {
        "id": "3105f85cb640e7cb",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iPowerInfrared3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "1cb1f9560fdefc48"
            ]
        ]
    },
    {
        "id": "8b9dab45ace99725",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iBuildPlatformCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "f0c1425278540125"
            ]
        ]
    },
    {
        "id": "8a87a7f2e8fb6226",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iReservoirPlatformCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.2",
        "payloadType": "num",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "0f7b1590c70ba0d9"
            ]
        ]
    },
    {
        "id": "b850fe97b89585c9",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iNozzleXAxisCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "cdb10623ecbf88ad"
            ]
        ]
    },
    {
        "id": "a623990178552b4f",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iNozzleYAxisCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "67a952e63a931564"
            ]
        ]
    },
    {
        "id": "fcf84cb13214471e",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iDoctorBladeCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.2",
        "payloadType": "num",
        "x": 160,
        "y": 760,
        "wires": [
            [
                "3385086c296f7fd2"
            ]
        ]
    },
    {
        "id": "49b0e20592bc770c",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iFiberTransportIntegrationUnitCurrent",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "ce0157296b4a2d2a"
            ]
        ]
    },
    {
        "id": "920f5113712a1f02",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var rPT100_Building = msg.payload;\nglobal.set(\"rPT100_Building\", rPT100_Building);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "fa39c1518e290eae",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "rPT100_Building",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "40",
        "payloadType": "num",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "920f5113712a1f02"
            ]
        ]
    },
    {
        "id": "52ef21b4c5934c7a",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var rPT100_Nozzle = msg.payload;\nglobal.set(\"rPT100_Nozzle\", rPT100_Nozzle);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "5ce778e318eeeffa",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "rPT100_Nozzle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "52ef21b4c5934c7a"
            ]
        ]
    },
    {
        "id": "09cc195ac9f182ef",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var rPT100_Fiber = msg.payload;\nglobal.set(\"rPT100_Fiber\", rPT100_Fiber);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "7f0c2e39685e5b56",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "rPT100_Fiber",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "80",
        "payloadType": "num",
        "x": 140,
        "y": 1000,
        "wires": [
            [
                "09cc195ac9f182ef"
            ]
        ]
    },
    {
        "id": "3d42e04697b92ca7",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var rTemperatureSurface = msg.payload;\nglobal.set(\"rTemperatureSurface\", rTemperatureSurface);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "c452b73aa2b5c782",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "rTemperatureSurface",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "70",
        "payloadType": "num",
        "x": 160,
        "y": 1060,
        "wires": [
            [
                "3d42e04697b92ca7"
            ]
        ]
    },
    {
        "id": "82863e4bd8cf4826",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b3337d54976098a1",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingMat2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "97a3a4b3417c0583",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatingFiber\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5e4bd980c68edb41",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"bRelaisHeatNozzle\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d32ae0ae1464d8d3",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "global.set(\"bLaserDI0\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "fd5951a39c7b7b52",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "bRelaisHeatingMat1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "82863e4bd8cf4826"
            ]
        ]
    },
    {
        "id": "70ebb0f2888a662f",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "bRelaisHeatingMat2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "b3337d54976098a1"
            ]
        ]
    },
    {
        "id": "433ab0de830e615d",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "bRelaisHeatingFiber",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "97a3a4b3417c0583"
            ]
        ]
    },
    {
        "id": "ae544e8f56f8c259",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "bRelaisHeatNozzle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "5e4bd980c68edb41"
            ]
        ]
    },
    {
        "id": "36b2068fd03af592",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "bLaserDI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "d32ae0ae1464d8d3"
            ]
        ]
    },
    {
        "id": "40656248ed4e7eea",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iStateTemperatrueControlling = msg.payload;\nglobal.set(\"iStateTemperatrueControlling\", iStateTemperatrueControlling);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "6c5f00aeef88e856",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iStateTemperatrueControlling",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 190,
        "y": 1120,
        "wires": [
            [
                "40656248ed4e7eea"
            ]
        ]
    },
    {
        "id": "8558594fa249a323",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iGeneralMachineState = msg.payload;\nglobal.set(\"iGeneralMachineState\", iGeneralMachineState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "b471388716d7bd8e",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iGeneralMachineState",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 1180,
        "wires": [
            [
                "8558594fa249a323"
            ]
        ]
    },
    {
        "id": "a858bd46a1835840",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iTotalLayers = msg.payload;\nglobal.set(\"iTotalLayers\", iTotalLayers);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "8097bd732ec92fe6",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iTotalLayers",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "120",
        "payloadType": "num",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "a858bd46a1835840"
            ]
        ]
    },
    {
        "id": "9a06689c7629e5d7",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var iCurrentLayer = msg.payload;\nglobal.set(\"iCurrentLayer\", iCurrentLayer);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "fbe0ee78923f7442",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "iCurrentLayer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "49",
        "payloadType": "num",
        "x": 140,
        "y": 1300,
        "wires": [
            [
                "9a06689c7629e5d7"
            ]
        ]
    },
    {
        "id": "a399f6cc10ac29eb",
        "type": "inject",
        "z": "acbe6deed3bf2340",
        "name": "rLayerThickness",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.5",
        "payloadType": "num",
        "x": 150,
        "y": 1360,
        "wires": [
            [
                "062477fa93e88624"
            ]
        ]
    },
    {
        "id": "062477fa93e88624",
        "type": "function",
        "z": "acbe6deed3bf2340",
        "name": "Set Global Variable",
        "func": "var rLayerThickness = msg.payload;\nglobal.set(\"rLayerThickness\", rLayerThickness);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1360,
        "wires": [
            []
        ]
    }
]